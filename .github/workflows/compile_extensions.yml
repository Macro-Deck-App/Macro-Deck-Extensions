name: Compile Extensions

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.value }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3.3.0
    - name: Init Submodules
      run: git submodule update --init --recursive --checkout
    - id: matrix
      run: git submodule --quiet foreach 'echo `git remote get-url origin | sed "s/https:\/\/github\.com\///" | sed "s/\.git//"` $sha1 $displaypath' | awk 'NR > 1 {printf(",")} {printf("{\"repository\":\"%s\",\"ref\":\"%s\",\"path\":\"%s\"}", $1, $2, $3)}' | cat <(echo -n "value=[") - <(echo -n "]") >> $GITHUB_OUTPUT
    - name: Check matrix value
      run: echo "${{ steps.matrix.outputs.value }}"

  build:
    needs: [ setup ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        value: ${{fromJson(needs.setup.outputs.matrix)}}
        
    steps:
    - name: Checkout
      uses: actions/checkout@v3.3.0
      
    - name: Init Submodule
      run: git submodule update --init --recursive ${{ matrix.value.path }}
      
    - name: Build Extension
      id: build_extension
      uses: RecklessBoon/Macro-Deck-Extension-Build-Action@main
      with:
        upsert-release: false
        ext-repo: ${{ matrix.value.repository }}
        ext-ref: ${{ matrix.value.ref }}
        
    - name: Extract Extension Info
      id: extension_info
      run: |
        echo "EXT_TYPE=$(jq --raw-output '."type"' ./${{ matrix.value.path }}/ExtensionManifest.json)" >> $GITHUB_OUTPUT
        echo "EXT_NAME=$(jq --raw-output '."name"' ./${{ matrix.value.path }}/ExtensionManifest.json)" >> $GITHUB_OUTPUT
        echo "EXT_AUTHOR=$(jq --raw-output '."author"' ./${{ matrix.value.path }}/ExtensionManifest.json)" >> $GITHUB_OUTPUT
        echo "EXT_REPO=$(jq --raw-output '."repository"' ./${{ matrix.value.path }}/ExtensionManifest.json)" >> $GITHUB_OUTPUT
        echo "EXT_PACKAGE_ID=$(jq --raw-output '."packageId"' ./${{ matrix.value.path }}/ExtensionManifest.json)" >> $GITHUB_OUTPUT
        echo "EXT_VERSION=$(jq --raw-output '."version"' ./${{ matrix.value.path }}/ExtensionManifest.json)" >> $GITHUB_OUTPUT
        echo "EXT_D_SUPPORT_USER_ID=$(jq '."dSupportUserId"' ./${{ matrix.value.path }}/ExtensionManifest.json)" >> $GITHUB_OUTPUT
  
    - name: Validate Extension Info
      if: |
        steps.extension_info.outputs.EXT_TYPE == '' || 
        steps.extension_info.outputs.EXT_NAME == '' || 
        steps.extension_info.outputs.EXT_AUTHOR == '' || 
        steps.extension_info.outputs.EXT_REPO == '' || 
        steps.extension_info.outputs.EXT_PACKAGE_ID == '' || 
        steps.extension_info.outputs.EXT_VERSION == ''
      shell: bash
      run: | 
        echo "::error file=ExtensionManifest.json::Invalid manifest! Required attributes [version, type, packageId, target-plugin-api-version]"
        exit 1
    
    - name: Debug Extension Info
      shell: bash
      run: |
        echo "[Extension Info Values]"
        echo "Type                     : ${{ steps.extension_info.outputs.EXT_TYPE }}"
        echo "Name                     : ${{ steps.extension_info.outputs.EXT_NAME }}"
        echo "Author                   : ${{ steps.extension_info.outputs.EXT_AUTHOR }}"
        echo "GitHub Repository        : ${{ steps.extension_info.outputs.EXT_REPO }}"
        echo "Package ID               : ${{ steps.extension_info.outputs.EXT_PACKAGE_ID }}"
        echo "Version                  : ${{ steps.extension_info.outputs.EXT_VERSION }}"
  
    - name: Check if new
      id: check-if-new
      run:  |
        http_code=$(curl -X 'GET' --silent --output /dev/null --write-out '%{http_code}' 'https://extensionstore.api.macro-deck.app/Extensions${{ steps.extension_info.outputs.EXT_TYPE == 'Plugin' && '' || '/Icon' }}/${{ steps.extension_info.outputs.EXT_PACKAGE_ID }}')
        is_new=0
        if [ $(($http_code)) -eq 404 ]; then
          is_new=1
        fi
        echo "is_new=$is_new" >> $GITHUB_OUTPUT
        
    - name: Create new Extension
      if: fromJSON(steps.check-if-new.outputs.is_new) == 1
      env:
        MACRO_DECK_API_AUTH: "Bearer ${{ secrets.MACRO_DECK_API_TOKEN }}"
      run: |
        curl -X 'POST' \
        --fail
        'https://extensionstore.api.macro-deck.app/Extensions' \
        -H 'accept: */*' \
        -H "Authorization: $MACRO_DECK_API_AUTH" \
        -H 'Content-Type: application/json' \
        -d '{
          "packageId": "${{ steps.extension_info.outputs.EXT_PACKAGE_ID }}",
          "extensionType": ${{ steps.extension_info.outputs.EXT_TYPE != 'Plugin' && 1 || 0 }},
          "name": "${{ steps.extension_info.outputs.EXT_NAME }}",
          "author": "${{ steps.extension_info.outputs.EXT_AUTHOR }}",
          "gitHubRepository": "${{ steps.extension_info.outputs.EXT_REPO }}",
          "dSupportUserId": "${{ steps.extension_info.outputs.EXT_SUPPORT_DISCORD_USER_ID }}",
          "downloads": 0
        }'
        
    - name: Download a Build Artifact
      uses: actions/download-artifact@v3.0.2
      with:
        # Artifact name
        name: ${{ steps.build_extension.outputs.artifact-name }}
    
    - name: Upload built files
      id: upload-build-files
      env:
        MACRO_DECK_API_AUTH: "Bearer ${{ secrets.MACRO_DECK_API_TOKEN }}"
      run: |
        http_code=$(curl \
          --fail --silent --output /dev/null --write-out %{http_code} \          
          -X 'POST' \
          'https://extensionstore.api.macro-deck.app/ExtensionsFiles/Upload' \
          -H 'accept: */*' \
          -H "Authorization: $MACRO_DECK_API_AUTH" \
          -H 'Content-Type: multipart/form-data' \
          -F 'file=@${{ steps.build_extension.outputs.artifact-path }};type=application/x-zip-compressed')
        response=$?
        echo "Upload response code: $http_code"
        echo "http_code=$http_code" >> $GITHUB_OUTPUT
        echo "response=$response" >> $GITHUB_OUTPUT
        
    - name: Check upload response
      if: |
        steps.upload-build-files.outputs.http_code < 200 || 
        steps.upload-build-files.outputs.http_code >= 300
      run: |
        echo "::error ::Failed to upload files to build server. Response: ${{ steps.upload-build-files.outputs.response }}"
        exit 1
