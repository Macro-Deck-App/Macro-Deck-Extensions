name: Compile Extensions

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.value }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3.3.0
    - name: Init Submodules
      run: git submodule update --init --recursive --checkout
    - id: matrix
      run: git submodule --quiet foreach 'echo `git remote get-url origin | sed "s/https:\/\/github\.com\///" | sed "s/\.git//"` $sha1 $displaypath' | awk 'NR > 1 {printf(",")} {printf("{\"repository\":\"%s\",\"ref\":\"%s\",\"path\":\"%s\"}", $1, $2, $3)}' | cat <(echo -n "value=[") - <(echo -n "]") >> $GITHUB_OUTPUT
    - name: Check matrix value
      run: echo "${{ steps.matrix.outputs.value }}"

  build:
    needs: [ setup ]
    runs-on: ubuntu-latest
    environment: development
    strategy:
      fail-fast: false
      matrix:
        value: ${{fromJson(needs.setup.outputs.matrix)}}
        
    steps:
    - name: Checkout
      uses: actions/checkout@v3.3.0
      
    - name: Init Submodule
      run: git submodule update --init --recursive ${{ matrix.value.path }}
      
    - name: Build Extension
      id: build_extension
      uses: RecklessBoon/Macro-Deck-Extension-Build-Action@main
      with:
        upsert-release: false
        ext-repo: ${{ matrix.value.repository }}
        ext-ref: ${{ matrix.value.ref }}
        
    - name: Extract Extension Info
      uses: rgarcia-phi/json-to-variables@9835d537368468c4e4de5254dc3efeadda183793
      with:
        filename: ${{ matrix.value.path }}/ExtensionManifest.json
        prefix: ext
        masked: false
    
    - name: Debug Extension Info
      shell: bash
      run: |
        echo "[Extension Info Values]"
        echo "Type                     : ${{ env.ext_type }}"
        echo "Name                     : ${{ env.ext_name }}"
        echo "Author                   : ${{ env.ext_author }}"
        echo "GitHub Repository        : ${{ env.ext_repository }}"
        echo "Package ID               : ${{ env.ext_packageId }}"
        echo "Version                  : ${{ env.ext_version }}"

    - name: Validate Extension Info
      if: |
        env.ext_type == '' || 
        env.ext_name == '' || 
        env.ext_author == '' || 
        env.ext_repository == '' || 
        env.ext_packageId == '' || 
        env.ext_version == ''
      shell: bash
      run: | 
        echo "::error file=ExtensionManifest.json::Invalid manifest! Required attributes [version, type, packageId, target-plugin-api-version]"
        exit 1
        
    - name: Download a Build Artifact
      uses: actions/download-artifact@v3.0.2
      with:
        # Artifact name
        name: ${{ steps.build_extension.outputs.artifact-name }}
    
    - name: Upload built files
      id: upload-build-files
      env:
        MACRO_DECK_API_AUTH: "Bearer ${{ secrets.MACRO_DECK_API_TOKEN }}"
      run: |
        response=$(curl --fail-with-body -X POST \
          '${{ vars.EXTENSION_STORE_API_URL }}/extensions/files/Upload' \
          -H 'accept: */*' \
          -H "Authorization: $MACRO_DECK_API_AUTH" \
          -H 'Content-Type: multipart/form-data' \
          -F 'file=@${{ steps.build_extension.outputs.artifact-path }};type=application/x-zip-compressed')
        echo -e "Response:\n$response"
        echo "response=$response" >> $GITHUB_OUTPUT
        
    - name: Check upload response
      if: |
        fromJSON(steps.upload-build-files.outputs.response).success == 'false' &&
        fromJSON(steps.upload-build-files.outputs.response).errorCode != 4
      run: |
        echo "::error ::Failed to upload files to build server. Response: ${{ steps.upload-build-files.outputs.response }}"
        exit 1
